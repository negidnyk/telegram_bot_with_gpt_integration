
from aiogram import Router, types
import openai
from config import OPENAI_KEY
from aiogram import F
from bot.services import rebuild_a_bot, generate_code, get_result

messages_router = Router()

# Set OpenAI API key
openai.api_key = OPENAI_KEY

conversation = []

@messages_router.message(F.text.lower() == "stop")
async def stop_bot(message: types.Message):
    await message.answer("OK! Looking forward to the next task!")

@messages_router.message(F.text.lower() == "help")
async def help_command(message: types.Message):
    await message.answer('''This bot can generate a code to improve itself.
    Use the "Generate code iteration" option to generate some code to improve me.
    Choose the "Stop" option to finish work.
    Choose the "Rebuild bot with new code" option to add the code of improvements to me and restart.
    Choose the "Send result code" option to get the current bot code.
    Choose the "Show commands" option to display a list of all available commands.''')

@messages_router.message(F.text.lower() == "rebuild bot with new code")
async def rebuild_bot(message: types.Message):
    await rebuild_a_bot(message, conversation)

@messages_router.message(F.text.lower() == "generate code iteration")
async def code_generation(message: types.Message):
    await generate_code(message, conversation)

@messages_router.message(F.text.lower() == "send result code")
async def send_result_code(message: types.Message):
    result = await get_result(message)
    try:
        await message.answer(result)
    except Exception as e:
        await message.answer(str(e))

@messages_router.message(F.text.lower() == "show commands")
async def show_commands(message: types.Message):
    commands = [
        "help",
        "rebuild bot with new code",
        "generate code iteration",
        "send result code",
        "show commands",
        "provide feedback"  # Added command
    ]
    await message.answer("Available commands:\n" + "\n".join(commands))

@messages_router.message(F.text.lower() == "provide feedback")
async def provide_feedback(message: types.Message):
    # Implement your feedback handling logic here
    await message.answer("Thank you for your feedback!")

@messages_router.message(content_types=types.ContentTypes.ANY)
async def handle_message(message: types.Message):
    # Implement your natural language processing logic here using OpenAI's language models
    await message.answer("I'm sorry, I don't understand.")
